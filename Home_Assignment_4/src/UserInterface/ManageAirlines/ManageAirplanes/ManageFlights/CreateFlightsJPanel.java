/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.ManageAirlines.ManageAirplanes.ManageFlights;

import Business.*;
import UserInterface.MainJFrame;
import java.awt.CardLayout;
import java.awt.Component;
import java.awt.event.KeyEvent;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
/**
 *
 * @author Vaibhavi
 */
public class CreateFlightsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form CreateFlightsJPanel
     */
    private JPanel userProcessContainer;
    private Airplane airplane;
    private Flights flight;
    
    public CreateFlightsJPanel(JPanel userProcessContainer, Airplane airplane) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.airplane = airplane;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        flightRateTextField = new javax.swing.JTextField();
        destinationTextField = new javax.swing.JTextField();
        sourceTextField = new javax.swing.JTextField();
        flightNumTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        seatColumnCapacityTextField = new javax.swing.JTextField();
        seatRowCapacityTextField = new javax.swing.JTextField();
        flightTimeTextField = new javax.swing.JTextField();
        flightDateTextField = new javax.swing.JTextField();
        backBtn = new javax.swing.JButton();
        createFlightBtn = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 102, 102));
        setPreferredSize(new java.awt.Dimension(700, 600));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Create Flights");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel3.setText("Flight Num :");

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel4.setText("Source :");

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel5.setText("Destination :");

        jLabel10.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel10.setText("Flight Rate :");

        flightRateTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                flightRateTextFieldKeyTyped(evt);
            }
        });

        destinationTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                destinationTextFieldKeyTyped(evt);
            }
        });

        sourceTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                sourceTextFieldKeyTyped(evt);
            }
        });

        flightNumTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                flightNumTextFieldKeyTyped(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel6.setText("Flight Date :");

        jLabel7.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel7.setText("Flight Time :");

        jLabel8.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel8.setText("Seat Row Capacity :");

        jLabel9.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel9.setText("Seat Column Capacity :");

        seatColumnCapacityTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                seatColumnCapacityTextFieldKeyTyped(evt);
            }
        });

        seatRowCapacityTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                seatRowCapacityTextFieldKeyTyped(evt);
            }
        });

        backBtn.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        backBtn.setText("<< Back");
        backBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.lightGray, java.awt.Color.darkGray, null, null));
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        createFlightBtn.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        createFlightBtn.setText("Create Flight");
        createFlightBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.lightGray, java.awt.Color.darkGray, null, null));
        createFlightBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createFlightBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(flightRateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(destinationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(sourceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(flightNumTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(76, 76, 76)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel6)
                                .addComponent(jLabel7))
                            .addComponent(jLabel8)
                            .addComponent(jLabel9))
                        .addGap(62, 62, 62)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(flightTimeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(seatRowCapacityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(flightDateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(seatColumnCapacityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(265, 265, 265)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(232, 232, 232)
                        .addComponent(createFlightBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(80, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jLabel1)
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(flightNumTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(sourceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(destinationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(flightRateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(flightDateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(flightTimeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(seatRowCapacityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(seatColumnCapacityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(48, 48, 48)
                .addComponent(createFlightBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(49, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed

        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length-1];
        ManageFlightsJPanel manageFlightsJPanel = (ManageFlightsJPanel)component;
        manageFlightsJPanel.populateTable();
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backBtnActionPerformed

    private void createFlightBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createFlightBtnActionPerformed
        
        if(sourceTextField.getText().isEmpty() || destinationTextField.getText().isEmpty() || flightDateTextField.getText().isEmpty()
            || flightTimeTextField.getText().isEmpty() || flightRateTextField.getText().isEmpty() || flightNumTextField.getText().isEmpty()
            || seatColumnCapacityTextField.getText().isEmpty() || seatRowCapacityTextField.getText().isEmpty())
        {
            JOptionPane.showMessageDialog(null,"Please enter all the fields!","Warning",JOptionPane.ERROR_MESSAGE);
        }
        else
        {
            int seatRow,seatColumn;
            seatRow = Integer.parseInt(seatRowCapacityTextField.getText());
            seatColumn = Integer.parseInt(seatColumnCapacityTextField.getText());
            
            flight = airplane.addFlight();
            flight.setSource(sourceTextField.getText());
            flight.setDestination(destinationTextField.getText());
            flight.setFlightNum(flightNumTextField.getText());
            flight.setFlightRate(Double.parseDouble(flightRateTextField.getText()));
            flight.setFlightDate(flightDateTextField.getText());
            flight.setFlightTime(flightTimeTextField.getText());
            flight.setSeatsAvailable(new Seats[seatRow][seatColumn]);
            flight.setDateTime(flight.getFlightDate()+" "+flight.getFlightTime());
                    
            JOptionPane.showMessageDialog(null, "Flight created successfully!");
            allocateSeats(flight);
            resetFields();
        }
    }//GEN-LAST:event_createFlightBtnActionPerformed

    private void flightNumTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_flightNumTextFieldKeyTyped
        
    }//GEN-LAST:event_flightNumTextFieldKeyTyped

    private void seatRowCapacityTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_seatRowCapacityTextFieldKeyTyped
        
        char ch = evt.getKeyChar();
        if(!(Character.isDigit(ch)) || (ch == KeyEvent.VK_BACK_SPACE) || (ch == KeyEvent.VK_DELETE))
        {
            evt.consume();
            if(Character.isAlphabetic(ch) || Character.isSpaceChar(ch))
            JOptionPane.showMessageDialog(null,"Enter numerical values only.");
        }
    }//GEN-LAST:event_seatRowCapacityTextFieldKeyTyped

    private void seatColumnCapacityTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_seatColumnCapacityTextFieldKeyTyped
        
        char ch = evt.getKeyChar();
        if(!(Character.isDigit(ch)) || (ch == KeyEvent.VK_BACK_SPACE) || (ch == KeyEvent.VK_DELETE))
        {
            evt.consume();
            if(Character.isAlphabetic(ch) || Character.isSpaceChar(ch))
            JOptionPane.showMessageDialog(null,"Enter numerical values only.");
        }
    }//GEN-LAST:event_seatColumnCapacityTextFieldKeyTyped

    private void flightRateTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_flightRateTextFieldKeyTyped
        
        char ch = evt.getKeyChar();
        if(!(Character.isDigit(ch)) || (ch == KeyEvent.VK_BACK_SPACE) || (ch == KeyEvent.VK_DELETE))
        {
            evt.consume();
            if(Character.isAlphabetic(ch) || Character.isSpaceChar(ch))
            JOptionPane.showMessageDialog(null,"Enter numerical values only.");
        }
    }//GEN-LAST:event_flightRateTextFieldKeyTyped

    private void sourceTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sourceTextFieldKeyTyped
        
        char ch = evt.getKeyChar();
        if(!(Character.isAlphabetic(ch)) || (ch == KeyEvent.VK_BACK_SPACE) || (ch == KeyEvent.VK_DELETE))
        {
            evt.consume();
            if(Character.isDigit(ch) || Character.isSpaceChar(ch))
            JOptionPane.showMessageDialog(null,"Enter alphabetical values only.");
        }
    }//GEN-LAST:event_sourceTextFieldKeyTyped

    private void destinationTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_destinationTextFieldKeyTyped
        
        char ch = evt.getKeyChar();
        if(!(Character.isAlphabetic(ch)) || (ch == KeyEvent.VK_BACK_SPACE) || (ch == KeyEvent.VK_DELETE))
        {
            evt.consume();
            if(Character.isDigit(ch) || Character.isSpaceChar(ch))
            JOptionPane.showMessageDialog(null,"Enter alphabetical values only.");
        }
    }//GEN-LAST:event_destinationTextFieldKeyTyped

    private void resetFields()
    {
        flightNumTextField.setText("");
        flightDateTextField.setText("");
        flightRateTextField.setText("");
        flightTimeTextField.setText("");
        seatColumnCapacityTextField.setText("");
        seatRowCapacityTextField.setText("");
        sourceTextField.setText("");
        destinationTextField.setText("");
    }
    
    private void allocateSeats(Flights flights)
    {
        Seats seats[][] = flights.getSeatsAvailable();
        int totalSeats=0;
        
        for(int i=0;i<seats.length;i++)
        {
            for(int j=0;j<seats[0].length;j++)
            {
                seats[i][j] = new Seats();
                switch(j)
                {
                    case 0:
                        seats[i][j].setSeatRow(i+1);
                        seats[i][j].setSeatColumn("A");
                        seats[i][j].setSeatPrice(500);
                        seats[i][j].setSeatType("Window");
                        seats[i][j].setBookingStatus(false);
                        seats[i][j].setSeatAlloted(seats[i][j].getSeatRow()+seats[i][j].getSeatColumn());
                        totalSeats++;
                        break;
                    case 1:
                        seats[i][j].setSeatRow(i+1);
                        seats[i][j].setSeatColumn("B");
                        seats[i][j].setSeatPrice(400);
                        seats[i][j].setSeatType("Middle");
                        seats[i][j].setBookingStatus(false);
                        seats[i][j].setSeatAlloted(seats[i][j].getSeatRow()+seats[i][j].getSeatColumn());
                        totalSeats++;
                        break;
                    case 2:
                        seats[i][j].setSeatRow(i+1);
                        seats[i][j].setSeatColumn("C");
                        seats[i][j].setSeatPrice(300);
                        seats[i][j].setSeatType("Aisle");
                        seats[i][j].setBookingStatus(false);
                        seats[i][j].setSeatAlloted(seats[i][j].getSeatRow()+seats[i][j].getSeatColumn());
                        totalSeats++;
                        break;
                    case 3:
                        seats[i][j].setSeatRow(i+1);
                        seats[i][j].setSeatColumn("D");
                        seats[i][j].setSeatPrice(300);
                        seats[i][j].setSeatType("Aisle");
                        seats[i][j].setBookingStatus(false);
                        seats[i][j].setSeatAlloted(seats[i][j].getSeatRow()+seats[i][j].getSeatColumn());
                        totalSeats++;
                        break;
                    case 4:
                        seats[i][j].setSeatRow(i+1);
                        seats[i][j].setSeatColumn("E");
                        seats[i][j].setSeatPrice(400);
                        seats[i][j].setSeatType("Middle");
                        seats[i][j].setBookingStatus(false);
                        seats[i][j].setSeatAlloted(seats[i][j].getSeatRow()+seats[i][j].getSeatColumn());
                        totalSeats++;
                        break;
                    case 5:
                        seats[i][j].setSeatRow(i+1);    
                        seats[i][j].setSeatColumn("F");
                        seats[i][j].setSeatPrice(500);
                        seats[i][j].setSeatType("Window");
                        seats[i][j].setBookingStatus(false);
                        seats[i][j].setSeatAlloted(seats[i][j].getSeatRow()+seats[i][j].getSeatColumn());
                        totalSeats++;
                        break;
                } 
            }
        }
        flights.setTotalSeats(totalSeats);
        flights.setSeatsRemaining(totalSeats);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JButton createFlightBtn;
    private javax.swing.JTextField destinationTextField;
    private javax.swing.JTextField flightDateTextField;
    private javax.swing.JTextField flightNumTextField;
    private javax.swing.JTextField flightRateTextField;
    private javax.swing.JTextField flightTimeTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField seatColumnCapacityTextField;
    private javax.swing.JTextField seatRowCapacityTextField;
    private javax.swing.JTextField sourceTextField;
    // End of variables declaration//GEN-END:variables
}
